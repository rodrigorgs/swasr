#!/usr/bin/env ruby

require 'rake'
require 'gxl'
require 'jars_as_modules'

task :extract => ['deps.xml', 'l1-names.pairs', 'modules-names.pairs']
task :default => [:stats, :distance_matrix]

desc "Extract dependencies using Dependency Finder"
task :depfind => 'deps.xml'

desc "Convert dependencies to pairs format"
task :pairs => ['l1-names.pairs', 'modules-names.pairs']

desc "Create network with numbers as labels"
task :numbers

desc "Compute distance matrix"
task :distance_matrix

desc "Compute statistics"
task :stats

#directory 'jars'

file 'deps.xml' => 'jars' do
  system "DependencyExtractor -xml -out deps.xml jars"
end

file 'l1-names.pairs' => 'deps.xml' do
  depxml_to_pairs2('deps.xml', 'l1-names.pairs')
end

file 'modules-names.pairs' => 'jars' do
  pairs = extract_modules(Dir.glob("jars/**/*.jar"))
  puts_pairs(pairs, "modules-names.pairs")
end

#file 'l1-numbers.pairs' => 'modules-numbers.pairs'
#file 'modules-numbers.pairs' do 
task :numbers do
  if !File.file?('l1-numbers.pairs') || !File.file?('modules-numbers.pairs')
    Rake::Task['pairs'].invoke # or .execute
    system "to_numeric_network.rb l1-names.pairs modules-names.pairs l1-numbers.pairs modules-numbers.pairs"
  end
end

task :analysis => :numbers do
  system "analysis.rb -e l1-numbers.pairs -m modules-numbers.pairs -v vertices.data -c clusters.data -g global.data"
end

task :stats => :analysis do
  system "stat_analysis.R vertices.data clusters.data global.data"
end

task :distance_matrix => :numbers do
  puts "distances.R l1-numbers.pairs distances-und.csv FALSE"
  system "distances.R l1-numbers.pairs distances-und.csv FALSE"
end

if __FILE__ == $0; system "rake --trace -f #{$0} #{ARGV.join(' ')}"; end
