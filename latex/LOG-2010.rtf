{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
\f3\froman\fcharset0 Times-Roman;\f4\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh13860\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 cluster.dcc.ufba.br: 
\b0 172.16.132.201 ou 200.17.147.12
\b \
app.dcc.ufba.br: 
\b0 200.17.147.9
\b \
\
Para rodar o banco: 
\b0 ~/shared/opt/postgresql/bin/postgres
\b \
T\'fanel SSH: 
\b0 ssh -p 1998 rodrigo@cluster.dcc.ufba.br -L 3128:cluster.dcc.ufba.br:5555
\b \
\
Conclus\'f5es do estudo de algoritmos\

\b0\fs28 \
ACDC \'e9 melhor que Bunch, e ambos s\'e3o melhores do que os algoritmos hier\'e1rquicos aglomerativos. CL90 \'e9 melhor que CL75, mas de resto n\'e3o se pode afirmar nada.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b \cf0 Dados
\b0 \
* Redes software realistas\

\b Evid\'eancias
\b0  \
* Teste de Wilcoxon, pareado.\
* Boxplot dos mojosims de cada algoritmo. Observar tamb\'e9m a dispers\'e3o.\
* Pie chart: propor\'e7\'e3o de redes em que cada algoritmo \'e9 o melhor???\
* Mojosim m\'e9dio por algoritmo???\

\b Poss\'edveis explica\'e7\'f5es\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b0 \cf0 Em Wu, a ordem (do melhor para o pior) \'e9: CL90, CL75, Bunch, ACDC, SL75, SL90. \
\
Algoritmos aglomerativos s\'e3o prejudicados com o aumento do n\'famero de m\'f3dulos (nada se pode afirmar sobre os SL). Os demais s\'e3o beneficiados.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b \cf0 Dados
\b0 \
* Todas as redes\

\b Evid\'eancias
\b0 \
* Teste de Mann-Whitney\
* Histograma agrupado para cada algoritmo (m\'e9dia dos mojosims por tamanho de m\'f3dulo. Tra\'e7ar como gr\'e1fico de linhas)\

\b Poss\'edveis explica\'e7\'f5es\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b0 \cf0 Quando h\'e1 poucos m\'f3dulos, existe uma tend\'eancia a existirem m\'f3dulos que dominam a rede, comportamento que \'e9 observado nos m\'f3dulos encontrados por algoritmos aglomerativos.\
\
Todos os algoritmos pioram com o aumento de arestas externas, como esperado.\
\
A maioria dos algoritmos tem melhor desempenho com redes software-realistas.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b \cf0 Dados
\b0 \
* Todas as redes\

\b Evid\'eancias
\b0 \
* Teste de Mann-Whitney\
* Histograma: m\'e9dia dos MoJos por algoritmo e grupo (realista/n\'e3o-realista).\
Poss\'edveis explica\'e7\'f5es:\
. . . \
\
asd\
asd\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b\fs36 \cf0 \
ESTUDO DE ALGORITMOS\

\b0\fs24  
\b\fs36 \

\fs24 1. Rodar o BCR+ com pelo menos outras duas sementes aleat\'f3rias:
\b0 \
\

\f1 -- 
\f2\b Insere stubs de configura\'e7\'e3o de modelo
\f1\b0 \
INSERT INTO model_config (seed, fk_model, n, p1, p2, p3, fk_architecture, din, dout, fk_architecture, mu)\
SELECT 1 AS seed, fk_model, n, p1, p2, p3, fk_architecture, din, dout, fk_architecture, mu\
FROM model_config\
INNER JOIN network ON fk_model_config = pk_model_config\
WHERE fk_dataset = 1\
AND fk_model = 1 /* BCR */
\f0 \
\

\f1 -- 
\f2\b Insere stubs the redes
\f1\b0 \
INSERT INTO network (fk_model_config, synthetic, fk_dataset)\
SELECT pk_model_config, TRUE, 9\
FROM model_config\
WHERE fk_model = 1\
AND seed = 1\
AND p1 <> 0.7\

\f0 \

\f1 # 
\f2\b Ruby\

\f1\b0 require 'exp_clust'\
exp = CE.new
\f0 \

\f1 filter = Proc.new \{ |ds| ds.and(:fk_dataset => 9) \}\
exp.insert_stub_decompositions\
exp.insert_stub_triads\
exp.generate_missing_networks\
exp.compute_missing_decompositions(&filter)\
exp.compute_missing_mojos(&filter)\

\f0 \

\b 2. Extrair tabel\'e3o para o R
\b0 \
\

\f1 SELECT fk_model_config, s_score, seed, n, p1, p2, p3, din, dout, \
  fk_architecture, nme_architecture, mu, fk_clusterer_config,\
  nme_clusterer_config, mojosim\
FROM view_decomposition\
WHERE fk_dataset IN (1, 9)\
AND fk_model = 1\
AND NOT reference\
ORDER BY seed, n, p1, p2, p3, din, dout, fk_architecture, mu, fk_clusterer_config
\f0 \
.\
.\
\

\b 3. Aplicar testes
\b0 \
\

\f1 data <- read.csv("data.csv", header=T, sep=",")\
algorithms <- c("SL75", "SL90", "CL75", "CL90", "ACDC", "Bunch") #, "Infomap")\
\
\
# 
\f2\b Os algoritmos fazem diferen\'e7a? TODO: usar apenas realistas
\f1\b0 \
algfactor <- factor(data$nme_clusterer_config)\
results1 <- pairwise.wilcox.test(data$mojosim, algfactor, paired=T, alternative="greater")
\f0 \

\f1 # usa o ajuste de p-value de holm. Ver http://web.njit.edu/all_topics/Prog_Lang_Docs/html/library/base/html/p.adjust.html\
\
\

\f0 # resultado\
#   Y\
#X  p\
#significa\
#p = prob de X greater than Y \

\f1 \

\f2\b #... com redes realistas
\f1\b0 \
data2 = subset(data, s_score >= 0.88)\
results11 <- pairwise.wilcox.test(data$mojosim, algfactor, paired=F, alternative="greater")\
# Resultado: algoritmos, do melhor para o pior\
# Infomap, 
\f0 \

\f1 \

\f2\b\fs30 # meu proprio pairwise, redes realistas
\fs24 \

\f1\b0 ix = seq_along(algorithms)\
names(ix) = algorithms\
ix = outer(ix, ix)\
for (a in algorithms) \{\
 for (b in algorithms) \{\
  p1 = subset(data2, nme_clusterer_config==a)$mojosim\
  p2 = subset(data2, nme_clusterer_config==b)$mojosim\
  ix[a, b] = min(1, wilcox.test(p1, p2, paired=F, alternative="g")$p.value * 36) < 0.05\
 \}\
\}\
# Resultado: algoritmos, do melhor para o pior\

\f2\b # Infomap, ACDC, Bunch, (CL90 > CL75)
\f1\b0 \
\
# meu proprio pairwise\
ix = seq_along(algorithms)\
names(ix) = algorithms\
ix = outer(ix, ix)\
for (a in algorithms) \{\
 for (b in algorithms) \{\
  p1 = subset(data, nme_clusterer_config==a)$mojosim\
  p2 = subset(data, nme_clusterer_config==b)$mojosim\
  ix[a, b] = min(1, wilcox.test(p1, p2, paired=T, alternative="greater")$p.value * 49)\
 \}\
\}\
# Resultado: algoritmos, do melhor para o pior\

\f2\b # Infomap, ACDC, Bunch, SL90, CL90, SL75, CL75
\f1\b0 \
\
# 
\f2\b Quais par\'e2metros fazem diferen\'e7a?
\f1\b0 \
\
results2 <- data.frame(mu=rep(0,7), p1=rep(0,7), p2=rep(0,7), p3=rep(0,7), din=rep(0,7), dout=rep(0,7), nme_architecture=rep(0,7), seed=rep(0,7), row.names=algorithms)\
\
compute <- function(a, data_for_alg, param, v1, v2) \{\
  alpha = 0.05\
  p1 = subset(data_for_alg, get(param) == v1)$mojosim\
  p2 = subset(data_for_alg, get(param) == v2)$mojosim\
  less = (wilcox.test(p1, p2, paired=F, alternative="less")$p.value < 0.05)\
  greater = (wilcox.test(p1, p2, paired=F, alternative="greater")$p.value < 0.05)\
\
  if (less) \{\
    results2[a, param] <<- "+"\
  \}\
  else if (greater) \{\
    results2[a, param] <<- "-"\
  \}\
  else \{\
    results2[a, param] <<- " "\
  \}\
\}\
\
data$pext = data$p3 * data$mu\
for (a in algorithms) \{\
  print(a)\
  data_for_alg = subset(data, nme_clusterer_config==a)\
\
  compute(a, data_for_alg, "mu", 0.2, 0.6)\
  compute(a, data_for_alg, "p1", 0.0, 0.2)\
  compute(a, data_for_alg, "p2", 0.0, 0.4)\
  compute(a, data_for_alg, "p3", 0.2, 0.4)\
  compute(a, data_for_alg, "din", 0, 4)\
  compute(a, data_for_alg, "dout", 0, 4)\
  compute(a, data_for_alg, "nme_architecture", "04-ibatis", "16-findbugs")\
  compute(a, data_for_alg, "pext", 0.12, 0.24)\
\}\
\
\
# arquiteturas:\
#     02-gef   04-ibatis  08-megamek 16-findbugs       32-zk \
\
# algoritmos s\'e3o melhores pra redes s-realistas ou n\'e3o-s-realistas?\
data$real = data$s_score >= 0.88\
for (a in algorithms) \{\
  data_for_alg = subset(data, nme_clusterer_config==a)\
  compute(a, data_for_alg, "real", FALSE, TRUE)\
\}
\f0 \
\
\
.\
.\

\b\fs36 \
TAREFAS
\b0\fs24 \
- \'85\
\

\b\fs30 8 de janeiro de 2010\

\b0\fs24 \
M...\
\

\b\fs30 5 de janeiro de 2010\

\b0\fs24 \
Mexi um pouco no artigo e consegui reduzir a 4 p\'e1ginas. Por mim est\'e1 pronto.\
\
Estou usando o Skim como visualizador de PDF associado ao TextMate. Com ele eu posso clicar:\
\pard\pardeftab720\ql\qnatural

\f3\fs28 \cf0 you can press 
\f4\b \uc0\u8963 \u8997 \u8984 
\f3 O
\b0  (or use the bundle\'92s \'93Show in PDFViewer (pdfsync) command\'94) to jump to the matching place in the PDF file. Vice versa, when 
\b Shift-Command-clicking
\b0  on a location in Skim TextMate is showing the matching paragraph in the LaTeX source. -- http://plesslweb.ch/2007/04/02/setting-up-latex-on-mac-os-x/
\f0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \
Formatei minha disserta\'e7\'e3o segundo o template da COPIN\
\

\b\fs30 4 de janeiro de 2010\

\b0\fs24 \
Cortei algumas partes do artigo para caber em 4 p\'e1ginas. Quase consegui. Basicamente cortei as explica\'e7\'f5es dos modelos e de seus par\'e2metros.\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\b\fs28 \cf0 Pairwise Wilcoxon rank sum tests
\b0\fs24 \
\
Description:\
\
     Calculate pairwise comparisons between group levels with\
     corrections for multiple testing.\
\
Usage:\
\
     pairwise.wilcox.test(x, g, p.adjust.method = p.adjust.methods,\
                           paired=FALSE, ...)\
     \
Arguments:\
\
       x: response vector.\
\
       g: grouping vector or factor.\
\
p.adjust.method: method for adjusting p values (see \'91p.adjust\'92).\
\
  paired: a logical indicating whether you want a paired test.\
\
     ...: additional arguments to pass to \'91wilcox.test\'92.\
\
Details:\
\
     Extra arguments that are passed on to \'91wilcox.test\'92 may or may not\
     be sensible in this context. In particular, only the lower\
     triangle of the matrix of possible comparisons is being\
     calculated, so setting \'91alternative\'92 to anything other than\
     \'91"two.sided"\'92 requires that the levels of \'91g\'92 are ordered\
     sensibly.\
\
Value:\
\
     Object of class \'91"pairwise.htest"\'92\
\
See Also:\
\
     \'91wilcox.test\'92, \'91p.adjust\'92\
\
Examples:\
\
     attach(airquality)\
     Month <- factor(Month, labels = month.abb[5:9])\
     ## These give warnings because of ties :\
     pairwise.wilcox.test(Ozone, Month)\
     pairwise.wilcox.test(Ozone, Month, p.adj = "bonf")\
     detach()}